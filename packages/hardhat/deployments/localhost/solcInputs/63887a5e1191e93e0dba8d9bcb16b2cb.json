{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract ExampleExternalContract {\n\n  bool public completed;\n\n  function complete() public payable {\n    completed = true;\n  }\n\n}\n"
    },
    "contracts/Staker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\nimport \"./ExampleExternalContract.sol\";\n\ncontract Staker {\n\n  ExampleExternalContract public exampleExternalContract;\n\n  mapping(address => uint256) public balances;\n  mapping(address => uint256) public depositTimestamps;\n\n  uint256 public constant rewardRatePerBlock = 0.1 ether;\n  uint256 public withdrawalDeadline = block.timestamp + 120 seconds;\n  uint256 public claimDeadline = block.timestamp + 240 seconds;\n  uint256 public currentBlock = 0;\n\n  // Events\n  event Stake(address indexed sender, uint256 amount);\n  event Received(address, uint);\n  event Execute(address indexed sender, uint256 amount);\n\n  // Modifiers\n  // Checks if the withdrawal period been reached or not\n  modifier withdrawalDeadlineReached(bool requireReached) {\n    uint256 timeRemaining = withdrawalTimeLeft();\n    if( requireReached ) {\n      require(timeRemaining == 0, \"Withdrawal period is not reached yet\");\n    } else {\n      require(timeRemaining > 0, \"Withdrawal period has been reached\");\n    }\n    _;\n  }\n\n  // Checks if the claim period has ended or not\n  modifier claimDeadlineReached(bool requireReached) {\n    uint256 timeRemaining = claimPeriodLeft();\n    if( requireReached ) {\n      require(timeRemaining == 0, \"Claim deadline is not reached yet\");\n    } else {\n      require(timeRemaining > 0, \"Claim deadline has been reached\");\n    }\n    _;\n  }\n\n  // Requires that contract only be completed once!\n  modifier notCompleted() {\n    bool completed = exampleExternalContract.completed();\n    require(!completed, \"Stake already completed!\");\n    _;\n  }\n\n  constructor(address exampleExternalContractAddress){\n      exampleExternalContract = ExampleExternalContract(exampleExternalContractAddress);\n  }\n\n  // Stake function for a user to stake ETH in our contract\n  function stake() public payable withdrawalDeadlineReached(false) claimDeadlineReached(false) {\n    balances[msg.sender] = balances[msg.sender] + msg.value;\n    depositTimestamps[msg.sender] = block.timestamp;\n    emit Stake(msg.sender, msg.value);\n  }\n\n  /*\n  Withdraw function for a user to remove their staked ETH inclusive\n  of both principle and any accured interest\n  */\n  function withdraw() public withdrawalDeadlineReached(true) claimDeadlineReached(false) notCompleted {\n    require(balances[msg.sender] > 0, \"You have no balance to withdraw!\");\n    uint256 individualBalance = balances[msg.sender];\n    uint256 indBalanceRewards = individualBalance + ((block.timestamp-depositTimestamps[msg.sender]) * rewardRatePerBlock);\n    balances[msg.sender] = 0;\n\n    // Transfer all ETH via call! (not transfer) cc: https://solidity-by-example.org/sending-ether\n    (bool sent, bytes memory data) = msg.sender.call{value: indBalanceRewards}(\"\");\n    require(sent, \"withdrawal failed :( \");\n  }\n\n  /*\n  Allows any user to repatriate \"unproductive\" funds that are left in the staking contract\n  past the defined withdrawal period\n  */\n  function execute() public claimDeadlineReached(true) notCompleted {\n    uint256 contractBalance = address(this).balance;\n    exampleExternalContract.complete{value: address(this).balance}();\n  }\n\n  /*\n  READ-ONLY function to calculate time remaining before the minimum staking period has passed\n  */\n  function withdrawalTimeLeft() public view returns (uint256 withdrawalTimeLeft) {\n    if( block.timestamp >= withdrawalDeadline) {\n      return (0);\n    } else {\n      return (withdrawalDeadline - block.timestamp);\n    }\n  }\n\n  /*\n  READ-ONLY function to calculate time remaining before the minimum staking period has passed\n  */\n  function claimPeriodLeft() public view returns (uint256 claimPeriodLeft) {\n    if( block.timestamp >= claimDeadline) {\n      return (0);\n    } else {\n      return (claimDeadline - block.timestamp);\n    }\n  }\n\n  /*\n  Time to \"kill-time\" on our local testnet\n  */\n  function killTime() public {\n    currentBlock = block.timestamp;\n  }\n\n  /* \n  Function for our smart contract to receive ETH\n  cc: https://docs.soliditylang.org/en/latest/contracts.html#receive-ether-function\n  */\n  receive() external payable {\n      emit Received(msg.sender, msg.value);\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}